syntax = "proto3";

package ceresmeta;
option go_package = "github.com/CeresDB/ceresdbproto/pkg/metapb";

enum NodeState {
  ONLINE = 0;
  OFFLINE = 1;
}

enum ShardRole {
  LEADER = 0;
  FOLLOWER = 1;
}

// demo:
// cluster 1 -> v1/cluster/1, value is ceresmeta.Cluster
// cluster 2 -> v1/cluster/2, value is ceresmeta.Cluster
message Cluster {
  uint32 id = 1;
  string name = 2;
  uint32 min_node_count = 3;
  //the number of shard replication
  uint32 replication_factor = 4;
  uint32 shard_total = 5;
}

// demo:
// cluster 1 -> v1/cluster/1/topology/current, value is ceresmeta.ClusterTopology, latest version is 100
//           -> v1/cluster/1/topology/99, value is ceresmeta.ClusterTopology
//           -> v1/cluster/1/topology/98, value is ceresmeta.ClusterTopology
message ClusterTopology {
  enum ClusterState {
    EMPTY = 0;
    PREPARE_REBALANCE = 1;
    AWAITING_CLOSE = 2;
    AWAITING_OPEN = 3;
    STABLE = 4;
  }

  uint32 cluster_id = 1;
  uint64 data_version = 2;
  ClusterState state = 3;
  repeated Shard shard_view = 4;
  // cluster view's changed cause
  string cause = 5;
  uint64 created_at = 6;
  map<string, ChangeShards> change_node_shards = 7;
}

message ChangeShards {
  repeated Shard close_shards = 1;
  repeated Shard open_shards = 2;
}

message Shard {
  uint32 id = 1;
  ShardRole shard_role = 2;
  uint64 node_id = 3;
}

// demo:
// cluster 1 -> v1/cluster/1/schema/1, value is ceresmeta.Schema
//           -> v1/cluster/1/schema/2, value is ceresmeta.Schema
//           -> v1/cluster/1/schema/3, value is ceresmeta.Schema
message Schema {
  uint32 id = 1;
  uint32 cluster_id = 2;
  string name = 3;
}

// demo:
// cluster 1 -> v1/cluster/1/schema/1/table/1, value is ceresmeta.Table
//           -> v1/cluster/1/schema/1/table/2, value is ceresmeta.Table
//           -> v1/cluster/1/schema/1/table/3, value is ceresmeta.Table
//           -> v1/cluster/1/schema/2/table/4, value is ceresmeta.Table
message Table {
  uint64 id = 1;
  string name = 2;
  uint32 schema_id = 3;
  uint32 shard_id = 4;
  string desc = 5;
}

// demo:
// cluster 1 -> v1/cluster/1/shard/1/current, value is ceresmeta.ShardTopology, latest version is 10
//           -> v1/cluster/1/shard/1/9, value is ceresmeta.ShardTopology
//           -> v1/cluster/1/shard/1/8, value is ceresmeta.ShardTopology
//           -> v1/cluster/1/shard/2/current, value is ceresmeta.ShardTopology, latest version is 4
//           -> v1/cluster/1/shard/2/3, value is ceresmeta.ShardTopology
message ShardTopology {
  repeated uint64 table_ids = 1;
  uint64 version = 2;
}

// demo:
// cluster 1 -> v1/cluster/1/node/1, value is ceresmeta.Node
//           -> v1/cluster/1/node/2, value is ceresmeta.Node
message Node {
  uint32 id = 1;
  NodeInfo node_info = 2;
  uint64 create_time = 3;
  uint64 last_touch_time = 4;
  NodeState state = 5;
  HeartbeatSamplingInfo heartbeat_sampling_info = 6;
}

message NodeInfo {
  string node = 1;
  uint32 lease = 2;
  string zone = 3;
  string node_version = 4;
}

message HeartbeatSamplingInfo {
  double threshold = 1;
  double min_std_deviation_millis = 2;
  uint64 acceptable_heartbeat_pause_millis = 3;
  uint64 first_heartbeat_estimate_millis = 4;
  uint32 max_sample_size = 5;
  repeated int64 intervals = 6;
  uint64 interval_sum = 7;
  uint64 squared_interval_sum = 8;
  uint64 last_timestamp_millis = 9;
}